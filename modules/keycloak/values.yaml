## Metrics configuration
##
metrics:
  ## @param metrics.enabled Enable exposing Keycloak statistics
  ## ref: https://github.com/bitnami/bitnami-docker-keycloak#enabling-statistics
  ##
  enabled: true
  ## Prometheus Operator ServiceMonitor configuration
  ##
  serviceMonitor:
    ## @param metrics.serviceMonitor.enabled Create ServiceMonitor Resource for scraping metrics using PrometheusOperator
    ##
    enabled: true
    ## @param metrics.serviceMonitor.additionalLabels Used to pass Labels that are required by the installed Prometheus Operator
    ## ref: https://github.com/coreos/prometheus-operator/blob/master/Documentation/api.md#prometheusspec
    ##
    additionalLabels:
      mdmonitor: enabled

## PostgreSQL chart configuration
## ref: https://github.com/bitnami/charts/blob/master/bitnami/postgresql/values.yaml
##
postgresql:
  postgresqlPassword: "mioKarofa91Mia"

## Service configuration
##
service:
  ## @param service.type Kubernetes service type
  ##
  type: NodePort
  ## @param service.port Service HTTP port
  ##
  port: 80
  ## @param service.httpsPort HTTPS Port
  ##
  httpsPort: 443
  ## @param service.nodePorts [object] Specify the nodePort values for the LoadBalancer and NodePort service types.
  ## ref: https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport
  ##
  nodePorts:
    http: ""
    https: 31001

# ## Keycloak authentication parameters
# ## ref: https://github.com/bitnami/bitnami-docker-keycloak#admin-credentials
# ##
# auth:
#   ## @param auth.createAdminUser Create administrator user on boot
#   ##
#   createAdminUser: true
#   ## @param auth.adminUser Keycloak administrator user
#   ##
#   adminUser: user
#   ## @param auth.adminPassword Keycloak administrator password for the new user
#   ##
#   adminPassword: "mioKarofa91Mia"
#   ## @param auth.managementUser Wildfly management user
#   ##
#   managementUser: manager
#   ## @param auth.managementPassword Wildfly management password
#   ##
#   managementPassword: "mioKarofa91Mia"
#   ## @param auth.existingSecret An already existing secret containing auth info
#   ## e.g:
#   ## existingSecret:
#   ##   name: mySecret
#   ##   keyMapping:
#   ##     admin-password: myPasswordKey
#   ##     management-password: myManagementPasswordKey
#   ##     database-password: myDatabasePasswordKey
#   ##     tls-keystore-password: myTlsKeystorePasswordKey
#   ##     tls-truestore-password: myTlsTruestorePasswordKey
#   ##
#   existingSecret: ""
#   ## @param auth.existingSecretPerPassword Override `existingSecret` and other secret values
#   ## e.g:
#   ## existingSecretPerPassword:
#   ##   keyMapping:
#   ##     adminPassword: KEYCLOAK_ADMIN_PASSWORD
#   ##     managementPassword: KEYCLOAK_MANAGEMENT_PASSWORD
#   ##     databasePassword: password
#   ##     tlsKeystorePassword: JKS_KEYSTORE_TRUSTSTORE_PASSWORD
#   ##     tlsTruststorePassword: JKS_KEYSTORE_TRUSTSTORE_PASSWORD
#   ##   adminPassword:
#   ##     name: keycloak-test2.credentials ## release-name
#   ##   managementPassword:
#   ##     name: keycloak-test2.credentials
#   ##   databasePassword:
#   ##     name: keycloak.pocwatt-keycloak-cluster.credentials
#   ##   tlsKeystorePassword:
#   ##     name: keycloak-test2.credentials
#   ##   tlsTruststorePassword:
#   ##     name: keycloak-test2.credentials
#   ##
#   existingSecretPerPassword: {}
#   ## TLS encryption parameters
#   ## ref: https://github.com/bitnami/bitnami-docker-keycloak#tls-encryption
#   ##
#   tls:
#     ## @param auth.tls.enabled Enable TLS encryption
#     ##
#     enabled: true
#     ## @param auth.tls.autoGenerated Generate automatically self-signed TLS certificates. Currently only supports PEM certificates
#     ##
#     autoGenerated: false
#     ## @param auth.tls.existingSecret Existing secret containing the TLS certificates per Keycloak replica
#     ## Create this secret following the steps below:
#     ## 1) Generate your trustore and keystore files (more info at https://www.keycloak.org/docs/latest/server_installation/#_setting_up_ssl)
#     ## 2) Rename your truststore to `keycloak.truststore.jks`.
#     ## 3) Rename your keystores to `keycloak-X.keystore.jks` where X is the ID of each Keycloak replica
#     ## 4) Run the command below where SECRET_NAME is the name of the secret you want to create:
#     ##       kubectl create secret generic SECRET_NAME --from-file=./keycloak.truststore.jks --from-file=./keycloak-0.keystore.jks --from-file=./keycloak-1.keystore.jks ...
#     ##
#     existingSecret: "keycloak-tls-cert"
#     ## @param auth.tls.truststoreFilename Truststore specific filename inside the existing secret
#     ## Note: Setting up this value, you will use the same trustore file in all the replicas
#     ##
#     truststoreFilename: "truststore.jks"
#     ## @param auth.tls.keystoreFilename Keystore specific filename inside the existing secret
#     ## Note: Setting up this value, you will use the same trustore file in all the replicas
#     ##
#     keystoreFilename: "keystore.jks"
#     ## @param auth.tls.keystorePassword Password to access the keystore when it's password-protected
#     ##
#     keystorePassword: "elsecreto"
#     ## @param auth.tls.truststorePassword Password to access the truststore when it's password-protected
#     ##
#     truststorePassword: "elsecreto"

